# This workflow will build and push a node.js application to an Azure Web App when there is a push to the development branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
on:
  push:
    branches:
      - development

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '10.x'                # set this to the node version to use

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install, build, and test
      run: |
        # Build and test the project, then
        # deploy to Azure Web App.
        npm install
        npm run build --if-present
        npm run test --if-present
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
- name: Настройка среды Node.js
  использует: actions/setup-node@v2.4.1
  с участием:
    # Установить always-auth в npmrc
    always-auth: # необязательно, по умолчанию false
    # Версия Спецификация используемой версии. Примеры: 12.x, 10.15.1,> = 10.15.0.
    версия узла: # необязательно
    # Целевая архитектура для использования Node. Примеры: x86, x64. По умолчанию будет использовать системную архитектуру.
    архитектура: # необязательно
    # Установите этот параметр, если вы хотите, чтобы действие проверяло наличие последней доступной версии, которая удовлетворяет спецификации версии
    check-latest: # необязательно
    # Необязательный реестр для настройки аутентификации. Установит реестр в файл .npmrc и .yarnrc уровня проекта и настроит аутентификацию для чтения из env.NODE_AUTH_TOKEN
    URL-адрес реестра: # необязательно
    # Необязательная область для аутентификации в реестрах с заданной областью действия
    объем: # необязательно
    # Используется для получения распределений узлов из версий узлов. Поскольку есть значение по умолчанию, оно обычно не предоставляется пользователем.
    token: # необязательно, по умолчанию $ {{github.token}}
    # Используется для указания диспетчера пакетов для кэширования в каталоге по умолчанию. Поддерживаемые значения: npm, yarn, pnpm
    cache: # необязательно
    # Используется для указания пути к файлу зависимости: package-lock.json, yarn.lock и т. Д. Поддерживает подстановочные знаки или список имен файлов для кэширования нескольких зависимостей.
    cache-dependency-path: # необязательно
    # Устарело. Вместо этого используйте версию узла. Не будет поддерживаться после 1 октября 2019 г.
    версия: # необязательно
